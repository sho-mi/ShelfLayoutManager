@page "/"
@namespace ShelfLayout.Web.Components
@using Microsoft.Extensions.Logging
@using System.Threading
@using System.Threading.Tasks
@implements IAsyncDisposable

@inject ShelfLayoutService ShelfLayoutService
@inject ISkuRepository SkuRepository
@inject ShelfLayoutHubService HubService
@inject ILogger<ShelfLayoutView> _logger
@inject IJSRuntime _jsRuntime

<style>
    .lane-buttons {
        display: flex;
        gap: 0.5rem;
        margin-top: 0.5rem;
    }

    .add-sku-form {
        margin-top: 2rem;
        padding: 1.5rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        background-color: #f8f9fa;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-buttons {
        display: flex;
        gap: 1rem;
        margin-top: 1.5rem;
    }

    .form-control {
        width: 100%;
        padding: 0.375rem 0.75rem;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
    }

    label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
    }
</style>

<div class="shelf-layout">
    <div class="cabinet-management">
        <h2>Cabinet Management</h2>
        <button class="btn btn-primary" @onclick="ShowAddCabinetForm">Add Cabinet</button>
    </div>

    @if (_showAddCabinetForm)
    {
        <div class="add-cabinet-form">
            <h3>Add New Cabinet</h3>
            <div class="form-group">
                <label for="cabinetNumber">Cabinet Number:</label>
                <input type="number" id="cabinetNumber" @bind="newCabinet.Number" class="form-control" />
            </div>
            <div class="form-group">
                <label>Position:</label>
                <div class="position-inputs">
                    <input type="number" @bind="newCabinet.Position.X" placeholder="X" class="form-control" />
                    <input type="number" @bind="newCabinet.Position.Y" placeholder="Y" class="form-control" />
                </div>
            </div>
            <button class="btn btn-primary" @onclick="AddCabinet">Add</button>
            <button class="btn btn-secondary" @onclick="CancelAddCabinet">Cancel</button>
        </div>
    }

    @if (_cabinets != null && _cabinets.Count > 0)
    {
        <div class="cabinet-carousel-controls">
            <button class="carousel-arrow" @onclick="() => ChangeCabinet(-1)" disabled="@(currentCabinetIndex == 0)">&#8592;</button>
            <span class="carousel-label">Cabinet @(currentCabinetIndex + 1) of @_cabinets.Count</span>
            <button class="carousel-arrow" @onclick="() => ChangeCabinet(1)" disabled="@(currentCabinetIndex == _cabinets.Count - 1)">&#8594;</button>
        </div>
        <div class="cabinet-carousel-container">
            @{
                var cabinet = _cabinets[currentCabinetIndex];
            }
            <div class="cabinet-visual">
                <div class="cabinet-label">Cabinet</div>
                @for (int rowIdx = 0; rowIdx < cabinet.Rows.Count; rowIdx++)
                {
                    var row = cabinet.Rows[rowIdx];
                    <div class="row-visual">
                        <div class="row-number-container">
                            <div class="row-number">Row @row.Number</div>
                            <button class="btn btn-danger btn-sm remove-row-btn" @onclick="() => RemoveRow(cabinet.Number, row.Number)">Remove Row</button>
                        </div>
                        <div class="lanes-visual">
                            @foreach (var lane in row.Lanes)
                            {
                                <div class="lane-visual">
                                    <div class="lane-number">Lane @lane.Number</div>
                                    <div class="sku-wrapper">
                                        <div class="quantity-badge">@lane.Quantity</div>
                                        @if (!string.IsNullOrEmpty(lane.JanCode))
                                        {
                                            var sku = _skuImages.GetValueOrDefault(lane.JanCode);
                                            @if (sku != null && !string.IsNullOrEmpty(sku.ImageUrl))
                                            {
                                                <img src="@sku.ImageUrl" alt="@sku.Name" class="sku-img" onerror="this.src='/images/placeholder.png'" />
                                            }
                                            else
                                            {
                                                <img src="/images/placeholder.png" alt="Placeholder" class="sku-img" />
                                            }
                                        }
                                        else
                                        {
                                            <img src="/images/placeholder.png" alt="Placeholder" class="sku-img" />
                                        }
                                    </div>
                                    <div class="lane-buttons">
                                        @if (lane.Quantity == 0)
                                        {
                                            <button class="btn btn-primary btn-sm add-sku-btn" @onclick="() => ShowAddSkuForm(cabinet.Number, row.Number, lane.Number)">Add</button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-danger btn-sm remove-lane-btn" @onclick="() => RemoveLane(cabinet.Number, row.Number, lane.Number)">Remove</button>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    }

    @if (_selectedLane.HasValue)
    {
        <div class="add-sku-form">
            <h3>Add SKU to Lane</h3>
            <div class="form-group">
                <label for="janCode">JAN Code:</label>
                <input type="text" id="janCode" @bind="newSku.JanCode" class="form-control" />
            </div>
            <div class="form-group">
                <label for="skuName">Name:</label>
                <input type="text" id="skuName" @bind="newSku.Name" class="form-control" />
            </div>
            <div class="form-group">
                <label for="skuQuantity">Quantity:</label>
                <input type="number" id="skuQuantity" @bind="quantity" class="form-control" min="1" />
            </div>
            <div class="form-group">
                <label for="skuSize">Size:</label>
                <input type="number" id="skuSize" @bind="newSku.Size" class="form-control" />
            </div>
            <div class="form-group">
                <label for="skuWidth">Width:</label>
                <input type="number" id="skuWidth" @bind="newSku.Width" class="form-control" />
            </div>
            <div class="form-group">
                <label for="skuDepth">Depth:</label>
                <input type="number" id="skuDepth" @bind="newSku.Depth" class="form-control" />
            </div>
            <div class="form-group">
                <label for="skuHeight">Height:</label>
                <input type="number" id="skuHeight" @bind="newSku.Height" class="form-control" />
            </div>
            <div class="form-group">
                <label for="skuShapeType">Shape Type:</label>
                <select id="skuShapeType" @bind="newSku.ShapeType" class="form-control">
                    <option value="Can">Can</option>
                    <option value="Bottle">Bottle</option>
                    <option value="Box">Box</option>
                </select>
            </div>
            <div class="form-group">
                <label for="skuImageUrl">Image URL:</label>
                <input type="text" id="skuImageUrl" @bind="newSku.ImageUrl" class="form-control" />
            </div>
            <div class="form-buttons">
                <button class="btn btn-primary" @onclick="() => AddSku(_selectedLane.Value.CabinetNumber, _selectedLane.Value.RowNumber, _selectedLane.Value.LaneNumber)">Add SKU</button>
                <button class="btn btn-secondary" @onclick="CancelAddSku">Cancel</button>
            </div>
        </div>
    }
</div>

@code {
    private List<Cabinet>? _cabinets;
    private Dictionary<string, Sku> _skuImages = new();
    private (int CabinetNumber, int RowNumber, int LaneNumber)? _selectedLane;
    private bool _showAddCabinetForm;
    private bool _showAddRowForm;
    private int? _selectedCabinet;
    private const int MIN_LOAD_INTERVAL_MS = 5000; // 5 seconds
    private const int MAX_RETRIES = 3;
    private const int RETRY_DELAY_MS = 2000; // 2 seconds
    private int _retryCount = 0;
    private DateTime _lastLoadTime = DateTime.MinValue;
    private CancellationTokenSource? _refreshCts;
    private bool _isRefreshing;
    private readonly SemaphoreSlim _refreshLock = new SemaphoreSlim(1, 1);
    private int quantity = 1; // Default quantity for new SKUs
    private Cabinet newCabinet = new()
    {
        Number = 1,
        Position = new Position { X = 0, Y = 0, Z = 0 },
        Rows = new List<Row>(),
        Size = new Size { Width = 100, Height = 100, Depth = 100 }
    };
    private Row newRow = new()
    {
        Number = 1,
        PositionZ = 0,
        Lanes = new List<Lane>()
    };
    private Sku newSku = new()
    {
        JanCode = "",
        Name = "",
        Size = 0,
        Width = 0,
        Depth = 0,
        Height = 0,
        ShapeType = "Can",
        ImageUrl = "",
        TimeStamp = DateTimeOffset.UtcNow.ToUnixTimeSeconds()
    };
    private int currentCabinetIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadData();
            await LoadSkuImages();

            // Set up hub event handlers
            HubService.OnShelfLayoutUpdated += async () =>
            {
                await RefreshData();
            };

            HubService.OnSkuUpdated += async () =>
            {
                await LoadSkuImages();
                StateHasChanged();
            };

            HubService.OnCabinetManagementUpdated += async () =>
            {
                await RefreshData();
            };

            HubService.OnRowRemoved += async (cabinetNumber, rowNumber) =>
            {
                await RefreshData();
            };

            HubService.OnSkuRemoved += async (janCode) =>
            {
                await RefreshData();
            };

            // Add new event handlers for lane operations
            HubService.OnLaneRemoved += async (cabinetNumber, rowNumber, laneNumber) =>
            {
                await RefreshData();
            };

            HubService.OnLaneAdded += async (cabinetNumber, rowNumber, laneNumber) =>
            {
                await RefreshData();
            };

            // Initialize hub connection
            try
            {
                await HubService.InitializeAsync();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to initialize hub connection, continuing without real-time updates");
                // Continue without real-time updates
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error during component initialization");
            // Handle initialization error
        }
    }

    private async Task RefreshData()
    {
        if (_isRefreshing)
        {
            _logger.LogInformation("Refresh already in progress, skipping");
            return;
        }

        try
        {
            await _refreshLock.WaitAsync();
            _isRefreshing = true;

            // Cancel any existing refresh operation
            _refreshCts?.Cancel();
            _refreshCts = new CancellationTokenSource();

            _logger.LogInformation("Starting data refresh");
            await LoadData();
            _lastLoadTime = DateTime.Now;
            _retryCount = 0; // Reset retry count on success
        }
        catch (OperationCanceledException)
        {
            _logger.LogInformation("Refresh operation was cancelled");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error refreshing data: {Message}", ex.Message);
            if (_retryCount < MAX_RETRIES)
            {
                _retryCount++;
                var retryDelay = RETRY_DELAY_MS * _retryCount; // Exponential backoff
                _logger.LogInformation("Retrying in {Delay}ms (attempt {RetryCount} of {MaxRetries})", 
                    retryDelay, _retryCount, MAX_RETRIES);
                await Task.Delay(retryDelay, _refreshCts.Token);
                await RefreshData();
            }
            else
            {
                _logger.LogError("Max retries reached, giving up");
                _retryCount = 0;
                // Show error to user
                await _jsRuntime.InvokeVoidAsync("alert", "Failed to refresh data after multiple attempts");
            }
        }
        finally
        {
            _isRefreshing = false;
            _refreshLock.Release();
        }
    }

    private async Task LoadData()
    {
        try
        {
            _logger.LogInformation("Loading shelf data");
            var cabinets = await ShelfLayoutService.GetAllCabinetsAsync();
            _cabinets = cabinets.ToList();
            _logger.LogInformation("Successfully loaded {Count} cabinets", _cabinets.Count);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error loading data: {Message}", ex.Message);
            // Show error to user
            await _jsRuntime.InvokeVoidAsync("alert", $"Error loading data: {ex.Message}");
        }
    }

    private async Task LoadSkuImages()
    {
        try
        {
            var skus = await SkuRepository.GetAllAsync();
            _skuImages = skus.ToDictionary(s => s.JanCode);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error loading SKU images: {Message}", ex.Message);
            // Handle error appropriately
        }
    }

    private void ShowAddCabinetForm()
    {
        _showAddCabinetForm = true;
        newCabinet = new Cabinet
        {
            Number = _cabinets?.Count + 1 ?? 1,
            Position = new Position { X = 0, Y = 0, Z = 0 },
            Rows = new List<Row>(),
            Size = new Size { Width = 100, Height = 100, Depth = 100 }
        };
    }

    private async Task AddCabinet()
    {
        await ShelfLayoutService.AddCabinetAsync(newCabinet);
        _showAddCabinetForm = false;
        await RefreshData(); // Refresh the data after adding a new cabinet
    }

    private void CancelAddCabinet()
    {
        _showAddCabinetForm = false;
    }

    private void ShowAddRowForm(int cabinetNumber)
    {
        _showAddRowForm = true;
        _selectedCabinet = cabinetNumber;
        newRow = new Row
        {
            Number = _cabinets?.FirstOrDefault(c => c.Number == cabinetNumber)?.Rows.Count + 1 ?? 1,
            PositionZ = 0,
            Lanes = new List<Lane>()
        };
    }

    private async Task AddRow(int cabinetNumber)
    {
        await ShelfLayoutService.AddRowToCabinetAsync(cabinetNumber, newRow);
        _showAddRowForm = false;
        _selectedCabinet = null;
    }

    private void CancelAddRow()
    {
        _showAddRowForm = false;
        _selectedCabinet = null;
    }

    private async Task DeleteCabinet(int cabinetNumber)
    {
        await ShelfLayoutService.DeleteCabinetAsync(cabinetNumber);
    }

    private async Task RemoveRow(int cabinetNumber, int rowNumber)
    {
        await ShelfLayoutService.RemoveRowFromCabinetAsync(cabinetNumber, rowNumber);
    }

    private void ShowAddSkuForm(int cabinetNumber, int rowNumber, int laneNumber)
    {
        _selectedLane = (cabinetNumber, rowNumber, laneNumber);
    }

    private async Task AddSku(int cabinetNumber, int rowNumber, int laneNumber)
    {
        if (string.IsNullOrEmpty(newSku.JanCode)) return;

        await ShelfLayoutService.AddSkuToLaneAsync(newSku.JanCode, cabinetNumber, rowNumber, laneNumber, quantity);
        _selectedLane = null;
        await RefreshData();
    }

    private void CancelAddSku()
    {
        _selectedLane = null;
    }

    private async Task RemoveLane(int cabinetNumber, int rowNumber, int laneNumber)
    {
        try
        {
            var cabinet = _cabinets?.FirstOrDefault(c => c.Number == cabinetNumber);
            if (cabinet == null) return;

            var row = cabinet.Rows.FirstOrDefault(r => r.Number == rowNumber);
            if (row == null) return;

            var lane = row.Lanes.FirstOrDefault(l => l.Number == laneNumber);
            if (lane == null) return;

            await ShelfLayoutService.RemoveSkuAsync(lane.JanCode!, cabinetNumber, rowNumber, laneNumber);
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing lane: {ex.Message}");
        }
    }

    private void ChangeCabinet(int delta)
    {
        if (_cabinets == null || _cabinets.Count == 0) return;
        var newIndex = currentCabinetIndex + delta;
        if (newIndex < 0) newIndex = 0;
        if (newIndex >= _cabinets.Count) newIndex = _cabinets.Count - 1;
        currentCabinetIndex = newIndex;
    }

    public async ValueTask DisposeAsync()
    {
        if (HubService != null)
        {
            await HubService.DisposeAsync();
        }
        _refreshCts?.Cancel();
        _refreshCts?.Dispose();
        _refreshLock.Dispose();
    }
} 